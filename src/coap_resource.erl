-module(coap_resource).

-type ecoap_endpoint_id() :: ecoap_udp_socket:ecoap_endpoint_id().
-type coap_uri() :: core_link:coap_uri().

% called when a client asks for .well-known/core resources
-callback coap_discover(Prefix) -> [Uri] when
	Prefix :: [binary()],
	Uri :: coap_uri().

% GET handler
-callback coap_get(EpID, Prefix, Name, Query, Request) -> 
	{ok, Content} | {error, Error} | {error, Error, Reason} when
	EpID :: ecoap_endpoint_id(),
	Prefix :: [binary()],
	Name :: [binary()],
	Query :: [binary()],
	Request :: coap_message:coap_message(),
	Content :: map(),
	Error :: coap_message:error_code(),
	Reason :: binary().

% POST handler
-callback coap_post(EpID, Prefix, Name, Request) -> 
	{ok, Code, Content} | {error, Error} | {error, Error, Reason} when
	EpID :: ecoap_endpoint_id(),
	Prefix :: [binary()],
	Name :: [binary()],
	Request :: coap_message:coap_message(),
	Code :: coap_message:success_code(),
	Content :: map(),
	Error :: coap_message:error_code(),
	Reason :: binary().
-optional_callbacks([coap_post/4]).	

% PUT handler
-callback coap_put(EpID, Prefix, Name, Request) -> ok | {error, Error} | {error, Error, Reason} when
	EpID :: ecoap_endpoint_id(),
	Prefix :: [binary()],
	Name :: [binary()],
	Request :: coap_message:coap_message(),
	Error :: coap_message:error_code(),
	Reason :: binary().
-optional_callbacks([coap_put/4]).	

% DELETE handler
-callback coap_delete(EpID, Prefix, Name, Request) -> ok | {error, Error} | {error, Error, Reason} when
	EpID :: ecoap_endpoint_id(),
	Prefix :: [binary()],
	Name :: [binary()],
	Request :: coap_message:coap_message(),
	Error :: coap_message:error_code(),
	Reason :: binary().
-optional_callbacks([coap_delete/4]).	

% observe request handler
-callback coap_observe(EpID, Prefix, Name, Request) -> {ok, ObState} | {error, Error} | {error, Error, Reason} when
	EpID :: ecoap_endpoint_id(),
	Prefix :: [binary()],
	Name :: [binary()],
	Request :: coap_message:coap_message(),
	ObState :: any(),
	Error :: coap_message:error_code(),
	Reason :: binary().
-optional_callbacks([coap_observe/4]).	

% cancellation request handler
-callback coap_unobserve(ObState) -> ok when
	ObState :: any().
-optional_callbacks([coap_unobserve/1]).	

% handler for outgoing notifications generated by calling ecoap_handler:notify/2
% one can check Content-Format of notifications according to original observe request ObsReq 
% and may return {ok, {error, 'NotAcceptable'}, State} if the format can not be provided anymore
-callback handle_notify(Info, ObsReq, ObState) -> 
	{ok, Content, NewObState} | {ok, {error, Error}, NewObState} when
	Info :: any(),
	ObsReq :: coap_message:coap_message(),
	ObState :: any(),
	Content :: map(),
	Error :: coap_message:error_code(),
	NewObState :: any().
-optional_callbacks([handle_notify/3]).	

% handler for messages sent to the coap_handler process
% could be used to generate notifications
% the function can be used to generate tags which correlate outgoing CON notifications with incoming ACKs
-callback handle_info(Info, ObsReq, ObState) -> 
	{notify, Ref, Content, NewObState} | 
	{notify, Ref, {error, Error}, NewObState} |
	{noreply, NewObState} | 
	{stop, NewObState} when
	Info :: any(),
	ObsReq :: coap_message:coap_message(),
	ObState :: any(),
	Ref :: any(),
	Content :: map(),
	Error :: coap_message:error_code(),
	NewObState :: any().
-optional_callbacks([handle_info/3]).	

% response to notifications
-callback coap_ack(Ref, ObState) -> {ok, NewObState} when
	Ref :: any(),
	ObState :: any(),
	NewObState :: any().
-optional_callbacks([coap_ack/2]).	

-export([coap_discover/2, coap_get/6, coap_post/5, coap_put/5, coap_delete/5, 
        coap_observe/5, coap_unobserve/2, handle_notify/4, handle_info/4, coap_ack/3]).

coap_discover(Module, Prefix) ->
	try Module:coap_discover(Prefix) of
		Response -> Response
	catch Class:Reason ->
		report_error(Class, Reason),
		[]
	end.

coap_get(Module, EpID, Prefix, Name, Query, Request) ->
	try Module:coap_get(EpID, Prefix, Name, Query, Request) of
		Response -> Response
	catch Class:Reason ->
		report_error(Class, Reason),
		{error, 'InternalServerError'}
	end.

coap_post(Module, EpID, Prefix, Name, Request) ->
	case erlang:function_exported(Module, coap_post, 4) of
		true -> 
			try Module:coap_post(EpID, Prefix, Name, Request) of
				Response -> Response
			catch Class:Reason ->
				report_error(Class, Reason),
				{error, 'InternalServerError'}
			end;
		false ->
			{error, 'MethodNotAllowed'}
	end.

coap_put(Module, EpID, Prefix, Name, Request) ->
	case erlang:function_exported(Module, coap_put, 4) of
		true ->
			try Module:coap_put(EpID, Prefix, Name, Request) of
				Response -> Response
			catch Class:Reason ->
				report_error(Class, Reason),
				{error, 'InternalServerError'}
			end;
		false ->
    		{error, 'MethodNotAllowed'}
    end.

coap_delete(Module, EpID, Prefix, Name, Request) ->
	case erlang:function_exported(Module, coap_delete, 4) of
		true ->
			try Module:coap_delete(EpID, Prefix, Name, Request) of
				Response -> Response
			catch Class:Reason ->
				report_error(Class, Reason),
				{error, 'InternalServerError'}
			end;
		false ->
    		{error, 'MethodNotAllowed'}
    end.

coap_observe(Module, EpID, Prefix, Name, Request) ->
	case erlang:function_exported(Module, coap_observe, 4) of
		true ->
			try Module:coap_observe(EpID, Prefix, Name, Request) of
				Response -> Response
			catch Class:Reason ->
				report_error(Class, Reason),
				{error, 'InternalServerError'}
			end;
		false ->
    		{error, 'MethodNotAllowed'}
    end.

coap_unobserve(Module, ObState) ->
	case erlang:function_exported(Module, coap_unobserve, 1) of
		true ->
			try Module:coap_unobserve(ObState) of
				Response -> Response
			catch Class:Reason ->
				report_error(Class, Reason),
				ok
			end;
		false ->
    		ok
    end.

handle_notify(Module, Notification, ObsReq, ObState) ->
    case erlang:function_exported(Module, handle_notify, 3) of
		true ->
			try Module:handle_notify(Notification, ObsReq, ObState) of
				Response -> Response
			catch Class:Reason ->
				report_error(Class, Reason),
				{error, 'InternalServerError'}
			end;
		false ->
    		{ok, Notification, ObState}
    end.

handle_info(Module, Info, ObsReq, ObState) ->
	case erlang:function_exported(Module, handle_info, 3) of
		true ->
			try Module:handle_info(Info, ObsReq, ObState) of
				Response -> Response
			catch Class:Reason ->
				report_error(Class, Reason),
				{error, 'InternalServerError'}
			end;
		false ->
    		{noreply, ObState}
    end.

coap_ack(Module, Ref, ObState) ->
	case erlang:function_exported(Module, coap_ack, 2) of
		true ->
			try Module:coap_ack(Ref, ObState) of
				Response -> Response
			catch Class:Reason ->
				report_error(Class, Reason),
				{ok, ObState}
			end;
		false ->
			{ok, ObState}
	end.

report_error(Class, Reason) ->
	error_logger:error_msg("coap_handler failed: ~p", [{Class, Reason, erlang:get_stacktrace()}]).

% end of file
